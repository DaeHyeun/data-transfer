<!-- views/chat.ejs -->
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>채팅</title>
    <style>
        #chat-box {
            width: 100%;
            height: 300px;
            overflow-y: scroll;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        #message-input {
            width: 80%;
            padding: 10px;
        }
        #send-btn {
            padding: 10px;
        }
    </style>
</head>
<body>
<h1>채팅방</h1>
<p>로그인한 사용자: <%= username %></p>

<div id="chat-box"></div>

<input type="text" id="message-input" placeholder="메시지를 입력하세요..." />
<button id="send-btn">전송</button>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    // 메시지 전송 함수
    function sendMessage() {
        const message = document.getElementById('message-input').value;
        const username = '<%= username %>'; // 서버에서 전달한 username을 가져옴

        if (message) {
            // 서버로 메시지 전송
            socket.emit('socket', { username, message }); // { username, message } 형식으로 전송
            document.getElementById('message-input').value = '';  // 입력창 초기화
        }
    }

    // 버튼 클릭 시 메시지 전송
    document.getElementById('send-btn').addEventListener('click', sendMessage);

    // Enter 키로 메시지 전송
    document.getElementById('message-input').addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault(); // Enter 키 기본 동작 방지 (새 줄 추가 방지)
            sendMessage();  // 메시지 전송
        }
    });

    // 서버로부터 받은 메시지 처리
    socket.on('message', (msg) => {
        const chatBox = document.getElementById('chat-box');
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = msg; // 메시지 HTML 삽입
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;  // 스크롤 맨 아래로
    });
</script>
</body>
</html>
