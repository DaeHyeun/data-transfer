extends layout

block content
  h1= title
  ul#messages(style="list-style-type: none; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9; height: 300px; overflow-y: scroll; margin-bottom: 20px;")

  // 메시지와 버튼을 포함한 하단 고정 영역
  div#chat-area(style="position: fixed; bottom: 0; left: 0; width: 100%; background-color: white; padding: 10px; box-shadow: 0 -2px 5px rgba(0,0,0,0.1);")
    form#form(action="" style="display: flex; justify-content: space-between; align-items: center; gap: 10px; width: 100%; max-width: 500px; margin: 0 auto;")
      
      // 보낼 사람 선택
      div(style="flex-grow: 1;")
        label(for="name" style="font-weight: bold;") To
        select#name(style="padding: 10px; border: 1px solid #ccc; border-radius: 5px; width: 100%;")
          option(value="")

      // 메시지 입력
      div(style="flex-grow: 2;")
        label(for="input" style="font-weight: bold;") Message
        input#input(type="text" autocomplete="off" placeholder="Type your message here" required style="padding: 10px; border: 1px solid #ccc; border-radius: 5px; width: 100%;")

      // 파일 업로드
      div(style="flex-grow: 1;")
        input#file(type="file" accept=accept="image/*, video/*, audio/*, application/pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, text/plain, .zip" style="padding: 10px; border: 1px solid #ccc; border-radius: 5px; width: 100%;")

      // 보내기 버튼
      div(style="flex-shrink: 0;")
        button(type="submit" style="padding: 10px; border: none; border-radius: 5px; background-color: #4CAF50; color: white; font-size: 16px; cursor: pointer; width: 100%; position: relative; top: 8px; left: 20px;") Send

  script(src="/socket.io/socket.io.js")
  script.
    var socket = io();
    var username = new URLSearchParams(window.location.search).get('username');
    var room = new URLSearchParams(window.location.search).get("room");
    var data = {username: username, room: room};
    socket.emit('joinRoom', data);
    
    if (!username) {
      alert("Username is required.");
      window.location.href = '/';
    }

    var form = document.getElementById('form');
    var nasm = document.getElementById('name');
    var input = document.getElementById('input');
    var messages = document.getElementById('messages');
    var fileInput = document.getElementById('file');

    form.addEventListener('submit', function(e) {
      e.preventDefault();
      var formData = new FormData();
      
      if (nasm.value && input.value && username) {
        fetch('http://localhost:8080/api/one-to-one', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ user: username, receiver: nasm.value, message: input.value, room: room })
        })
        .then(response => response.json())
        .then(data => {
          input.value = '';
        })
        .catch(error => console.error('Error sending message to Spring Boot:', error));
      } else if (input.value || fileInput.files.length) {
          formData.append('user', username);
          formData.append('room', room);
          if (nasm.value) formData.append('receiver', nasm.value);
          if (input.value) formData.append('message', input.value);
          if (fileInput.files.length > 0) {
              var reader = new FileReader();
              reader.onload = function (event) {
                  var base64File = event.target.result.split(',')[1]; // Base64 부분만 추출
                  formData.append('file', base64File);
                  formData.append('fileName', fileInput.files[0].name);
                  formData.append('filetype', fileInput.files[0].type);

                  fetch('http://localhost:8080/api/send-message', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify(Object.fromEntries(formData))
                  })
                  .then(response => response.json())
                  .then(data => {
                      input.value = '';
                      fileInput.value = '';
                  })
                  .catch(error => console.error('Error sending message to Spring Boot:', error));
              };
              reader.readAsDataURL(fileInput.files[0]);
          } else {
              fetch('http://localhost:8080/api/send-message', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(Object.fromEntries(formData))
              })
              .then(response => response.json())
              .then(data => {
                  input.value = '';
              })
              .catch(error => console.error('Error sending message to Spring Boot:', error));
          }
        }
    });

    //- 사용자 정보를 가져와 업데이트
    socket.on('update-user-list', function(userList) {
        var select = document.getElementById('name');
        
        // 기존 옵션 초기화
        select.innerHTML = '<option value="">ALL</option>';

        // 사용자 목록을 기반으로 옵션 추가
        userList.forEach(function(user) {
            if (user.username !== username) {
                var option = document.createElement('option');
                option.value = user.username;  // 사용자 이름을 value로 사용
                option.textContent = user.username;  // 사용자 이름을 텍스트로 사용
                select.appendChild(option);
            }
        });
    });

    // - 메시지 받아오기
    socket.on('chat message', function(data) {
        var item = document.createElement('li');
        item.textContent = data.user + ': ' + data.message;

        if (data.file) {
            if (data.file.type.startsWith('image') || data.file.type.startsWith('video')) {
                const mediaElement = document.createElement(data.file.type.startsWith('image') ? 'img' : 'video');
                mediaElement.src = data.file.url;
                mediaElement.controls = true;

                if (data.file.type.startsWith('image')) {
                    mediaElement.style.maxWidth = '50%';
                    mediaElement.style.height = 'auto';
                } else if (data.file.type.startsWith('video')) {
                    mediaElement.style.width = '100%';
                    mediaElement.style.height = 'auto';
                }
                item.appendChild(document.createElement('br'));
                item.appendChild(mediaElement);
            } else {
                const fileLink = document.createElement('a');
                fileLink.href = data.file.url;
                fileLink.download = data.filename;
                fileLink.textContent = `Download ${data.filename}`;
                item.appendChild(document.createElement('br'));
                item.appendChild(fileLink);
            }
        }

        document.getElementById('messages').appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
    });


    // 초기 메시지 받아오기
    socket.on('previousMessages', (messages) => {
      messages.forEach((message) => {
        const item = document.createElement('li');

        // 메시지와 파일 정보를 파싱
        const parts = message.split(", ");
        const textPart = parts[0]; // "username: message" 형태
        const filePart = parts[1] ? parts[1].split(": ") : null; // "fileName: fileType" 형태

        // 메시지 출력
        const textNode = document.createTextNode(textPart);
        item.appendChild(textNode);

        // 파일이 있는 경우 추가 처리
        if (filePart && filePart.length === 2) {
          const [fileName, fileType] = filePart;

          // 이미지나 비디오 파일 처리
          if (fileType.startsWith('image') || fileType.startsWith('video')) {
            const mediaElement = document.createElement(
              fileType.startsWith('image') ? 'img' : 'video'
            );
            mediaElement.src = `/uploads/${fileName}`;
            mediaElement.controls = true;

            // 이미지와 비디오의 스타일 설정
            if (fileType.startsWith('image')) {
              mediaElement.style.maxWidth = '50%';
              mediaElement.style.height = 'auto';
            } else if (fileType.startsWith('video')) {
              mediaElement.style.width = '100%';
              mediaElement.style.height = 'auto';
            }

            item.appendChild(document.createElement('br'));
            item.appendChild(mediaElement);
          } else {
            // 이미지와 비디오가 아닌 경우, 다운로드 링크 추가
            const downloadLink = document.createElement('a');
            downloadLink.href = `/uploads/${fileName}`;
            downloadLink.textContent = `Download ${fileName}`;
            downloadLink.download = fileName; // 파일 다운로드 속성 설정

            item.appendChild(document.createElement('br'));
            item.appendChild(downloadLink);
          }
        }

        document.getElementById('messages').appendChild(item);
      });
    });
