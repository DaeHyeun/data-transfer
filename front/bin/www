#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('express_server:server');
var http = require('http');
var socketIo = require('socket.io');


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

// socket io
var io = socketIo(server);

app.locals.io = io;

let users = {};
app.locals.users = users;

// 클라이언트 연결 시
io.on('connection', (socket) => {
  console.log('소켓 연결 소켓 아이디 : ' + socket.id);

  // 채팅방 입장
  socket.on('socket', (data) => {
    const { username, message } = data; // 데이터에서 username과 message 추출
    console.log(`${username}: ${message}`);

    // 모든 클라이언트에게 메시지 전송
    io.emit('message', `<strong>${username}:</strong> ${message}`);
  });

  // 클라이언트 연결 종료 시
  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}